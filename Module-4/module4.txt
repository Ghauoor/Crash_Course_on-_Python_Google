Slice:
    The Portion of a str thats can contain one or more chars
String operations
len(string) - Returns the length of the string

for character in string - Iterates over each character in the string

if substring in string - Checks whether the substring is part of the string

string[i] - Accesses the character at index i of the string, starting at zero

string[i:j] - Accesses the substring starting at index i, ending at index j minus 1. If i is omitted, its value defaults to 0. If j is omitted, the value will default to len(string).

String methods
string.lower() - Returns a copy of the string with all lowercase characters

string.upper() - Returns a copy of the string with all uppercase characters

string.lstrip() - Returns a copy of the string with the left-side whitespace removed

string.rstrip() - Returns a copy of the string with the right-side whitespace removed

string.strip() - Returns a copy of the string with both the left and right-side whitespace removed

string.count(substring) - Returns the number of times substring is present in the string

string.isnumeric() - Returns True if there are only numeric characters in the string. If not, returns False.

string.isalpha() - Returns True if there are only alphabetic characters in the string. If not, returns False.

string.split() - Returns a list of substrings that were separated by whitespace (whitespace can be a space, tab, or new line)

string.split(delimiter) - Returns a list of substrings that were separated by whitespace or a delimiter

string.replace(old, new) - Returns a new string where all occurrences of old have been replaced by new.

delimiter.join(list of strings) - Returns a new string with all the strings joined by the delimiter    

List comprehensions allow you to create a new list from a sequence or a range in a single line.

len(sequence) - Returns the length of the sequence.

for element in sequence - Iterates over each element in the sequence.

if element in sequence - Checks whether the element is part of the sequence.

sequence[x] - Accesses the element at index [x] of the sequence, starting at zero

sequence[x:y] - Accesses a slice starting at index [x], ending at index [y-1]. If [x] is omitted, the index will start at 0 by default. If [y] is omitted, the len(sequence) will set the ending index position by default.

for index, element in enumerate(sequence) - Iterates over both the indices and the elements in the sequence at the same time.


List-specific operations and methods
list[index] = x - Replaces the element at index [n] with x.

list.append(x) - Appends x to the end of the list.

list.insert(index, x) - Inserts x at index position [index].

list.pop(index) - Returns the element at [index] and removes it from the list. If [index] position is not in the list, the last element in the list is returned and removed.

list.remove(x) - Removes the first occurrence of x in the list.

list.sort() - Sorts the items in the list.

list.reverse() - Reverses the order of items of the list.

list.clear() - Deletes all items in the list.

list.copy() - Creates a copy of the list.

list.extend(other_list) - Appends all the elements of other_list at the end of list

