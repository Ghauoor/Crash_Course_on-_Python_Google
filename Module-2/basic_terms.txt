expression - a combination of numbers, symbols, or other values that produce a result when evaluated

data types - classes of data (e.g., string, int, float, Boolean, etc.), which include the properties and behaviors of instances of the data type (variables)

variable - an instance of a data type class, represented by a unique name within the code, that stores changeable values of the specific data type

implicit conversion - when the Python interpreter automatically converts one data type to another

explicit conversion - when code is written to manually convert one data type to another using a data type conversion function:

str() - converts a value (often numeric) to a string data type

int() - converts a value (usually a float) to an integer data type

float() - converts a value (usually an integer) to a float data type

The purpose of the def() keyword is to define a new function. 

// --> Floor devision Oprator divide the number and take the int part 
        as a result

None --> A Special Datatype in py used to indicate that thing 
        are empty or they return nothing   

return value - the value or variable returned as the end result of a function

parameter (argument) -  a value passed into a function for use within the function

refactoring code - a process to restructure code without changing functionality 

Create a reusable function - 
Replace duplicate code with one reusable function to make the code easier to read and repurpose.

Refactor code - Update code so that it is self-documenting and the intent of the code is clear.

Add comments - Adding comments is part of creating self-documenting code. 
Using comments allows you to leave notes to yourself and/or other programmers to make the purpose of the code clear.  


Expression

Description

"a" == "a"

If string "a" is identical to string "a", returns True. Else, returns False

"a" != "b"

If string "a" is not identical to string "b"

"a" > "b"

If string "a" has a larger Unicode value than string "b"

"a" >= "b"

If the Unicode value for string "a" is greater than or equal to the Unicode value of string "b"

"a" < "b"

If string "a"  has a smaller Unicode value than string "b"

"a" <= "b"

If the Unicode value for string "a" is smaller than or equal to the Unicode value of string "b"

a == a and a != b

True if both sides are True, otherwise False.

a > b or a <= c

True if either side is True. False if both sides are False.

not a == b

True if the statement is False, False if the statement is True.

Building off of the if and else blocks, which allow us to branch our code depending on the evaluation of one statement, 
the elif statement allows us even more comparisons to perform more complex branching. 
Very similar to the if statements, an elif statement starts with the elif keyword, 
followed by a comparison to be evaluated. This is followed by a colon, 
and then the code block on the next line, indented to the right. 
An elif statement must follow an if statement, 
and will only be evaluated if the if statement was evaluated as false. 
You can include multiple elif statements to build complex branching in your code to do all kinds of powerful things!

